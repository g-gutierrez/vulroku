{"ast":null,"code":"var _jsxFileName = \"/Users/grg/dev/repos/Vulcan/client/src/Shared/Search/Search.js\";\nimport React, { Fragment } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { Link } from 'react-router-dom';\nimport './search.css';\nimport styled from 'styled-components';\nimport * as services from '../../Pages/MoreServicesPage/pageData/servicesData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction splitServices(service) {\n  return service.split('\\n');\n}\n\nconst allServices = Object.keys(services).reduce((acc, curr) => acc.concat(splitServices(services[curr])), []);\nconst popularServices = ['Alcohol Distributor', 'Apparel', 'Bar/Beer Cleaning', 'Electrican', 'Food Distributor', 'General Cleaning', 'Hood Cleaning', 'HVAC', 'Linens', 'Outdoor Heating', 'Pest Control', 'Plumber', 'Refrigeration', 'Table Booth Repair', 'Window Repair'];\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n  padding: 10px 20px;\n  display: block;\n`;\n_c = StyledLink;\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n} // Teach Autosuggest how to calculate suggestions for any given input value.\n\n\nconst getSuggestions = value => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n  const regex = new RegExp(`${escapedValue}`, 'i');\n  if (escapedValue === '') return popularServices.map(service => service);\n  const results = [];\n\n  for (let i = 0; i < allServices.length; i += 1) {\n    if (regex.test(allServices[i])) results.push(allServices[i]);\n    if (results.length > 4) break;\n  }\n\n  return results;\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nconst getSuggestionValue = suggestion => suggestion;\n\nconst convertToNearmeLink = name => `/${name.toLowerCase().replace(/ /, '-')}/near-me`; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(StyledLink, {\n  to: convertToNearmeLink(suggestion),\n  children: suggestion\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 71,\n  columnNumber: 3\n}, this);\n\nclass Search extends React.Component {\n  constructor() {\n    super(); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.shouldRenderSuggestions = () => true;\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'who do you need to hire?',\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Autosuggest, {\n        shouldRenderSuggestions: this.shouldRenderSuggestions,\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps,\n        getSectionItems: this.getSectionItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"StyledLink\");","map":{"version":3,"sources":["/Users/grg/dev/repos/Vulcan/client/src/Shared/Search/Search.js"],"names":["React","Fragment","Autosuggest","Link","styled","services","splitServices","service","split","allServices","Object","keys","reduce","acc","curr","concat","popularServices","StyledLink","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","map","results","i","length","test","push","getSuggestionValue","suggestion","convertToNearmeLink","name","toLowerCase","renderSuggestion","Search","Component","constructor","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","shouldRenderSuggestions","state","render","inputProps","placeholder","getSectionItems"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { Link } from 'react-router-dom';\nimport './search.css';\nimport styled from 'styled-components';\n\nimport * as services from '../../Pages/MoreServicesPage/pageData/servicesData';\n\nfunction splitServices(service) {\n  return service.split('\\n');\n}\n\nconst allServices = Object.keys(services).reduce(\n  (acc, curr) => acc.concat(splitServices(services[curr])),\n  []\n);\n\nconst popularServices = [\n  'Alcohol Distributor',\n  'Apparel',\n  'Bar/Beer Cleaning',\n  'Electrican',\n  'Food Distributor',\n  'General Cleaning',\n  'Hood Cleaning',\n  'HVAC',\n  'Linens',\n  'Outdoor Heating',\n  'Pest Control',\n  'Plumber',\n  'Refrigeration',\n  'Table Booth Repair',\n  'Window Repair'\n];\n\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n  padding: 10px 20px;\n  display: block;\n`;\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n  const regex = new RegExp(`${escapedValue}`, 'i');\n\n  if (escapedValue === '') return popularServices.map(service => service);\n\n  const results = [];\n\n  for (let i = 0; i < allServices.length; i += 1) {\n    if (regex.test(allServices[i])) results.push(allServices[i]);\n    if (results.length > 4) break;\n  }\n\n  return results;\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\nconst convertToNearmeLink = name => `/${name.toLowerCase().replace(/ /, '-')}/near-me`;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <StyledLink to={convertToNearmeLink(suggestion)}>{suggestion}</StyledLink>\n);\n\nclass Search extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: '',\n      suggestions: [],\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue,\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value),\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: [],\n    });\n  };\n\n  shouldRenderSuggestions = () => true;\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'who do you need to hire?',\n      value,\n      onChange: this.onChange,\n    };\n\n    // Finally, render it!\n    return (\n      <Fragment>\n        {}\n        <Autosuggest\n          shouldRenderSuggestions={this.shouldRenderSuggestions}\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps}\n          getSectionItems={this.getSectionItems}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}